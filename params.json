{
  "name": "Android-testing-guide",
  "tagline": "[Examples] Complete reference for Android Testing with examples.",
  "body": "# android-testing-guide [![Join the chat at https://gitter.im/android-testing-guide/Lobby](https://badges.gitter.im/android-testing-guide/Lobby.svg)](https://gitter.im/android-testing-guide/Lobby?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\r\n\r\n### Show some :heart:\r\n[![GitHub stars](https://img.shields.io/github/stars/ravidsrk/android-testing-guide.svg?style=social&label=Star)](https://github.com/ravidsrk/android-testing-guide) [![GitHub forks](https://img.shields.io/github/forks/ravidsrk/android-testing-guide.svg?style=social&label=Fork)](https://github.com/ravidsrk/android-testing-guide/fork) [![GitHub watchers](https://img.shields.io/github/watchers/ravidsrk/android-testing-guide.svg?style=social&label=Watch)](https://github.com/ravidsrk/android-testing-guide) [![GitHub followers](https://img.shields.io/github/followers/ravidsrk.svg?style=social&label=Follow)](https://github.com/ravidsrk/android-testing-guide)\r\n[![Twitter Follow](https://img.shields.io/twitter/follow/ravidsrk.svg?style=social)](https://twitter.com/ravidsrk)\r\n\r\n> Complete reference for Android Testing with examples.\r\n\r\n## Contents\r\n\r\n- [Introduction](#introduction)\r\n    - [Why testing?](#why-testing)\r\n    - [Why unit test?](#why-unit-test)\r\n    - [Instrumented tests](#instrumented-tests)\r\n- [Local Tests](#local-tests)\r\n    - [JUnit basics](#junit-basics)\r\n    - [Beyond JUnit basics](#beyond-junit-basics)\r\n    - [Assertions](#assertions)\r\n    - [Hamcrest](#hamcrest)\r\n    - [Assertj](#assertj)\r\n    - [Rules](#rules)\r\n    - [Mockito](#mockito)\r\n    - [PowerMock](#powermock)\r\n    - [EasyMock](#easymock)\r\n    - [WireMock](#wiremock)\r\n    - [RESTMock](#restmock)\r\n- [Android](#android)\r\n    - [Android test rules](#android-test-rules)\r\n        - [Rule to test Android Activity](#rule-to-test-android-activity)\r\n        - [Rule to test Android Service](#rule-to-test-android-service)\r\n        - [Rule to test Android Intents](#rule-to-test-android-intents)\r\n    - [Android instrumented tests](#android-instrumented-tests)\r\n    - [Test filtering](#test-filtering)\r\n    - [Espresso](#espresso)\r\n        - [Basics](#basics)\r\n        - [Testing RecyclerView](#testing-recyclerview)\r\n        - [Testing Toast](#testing-toast)\r\n        - [Testing Intents](#testing-intents)\r\n        - [Testing Synchronization with background jobs](#idlingresource)\r\n    - [Robolectric](#robolectric)\r\n        - [Testing Activities](#testing-activities)\r\n        - [Testing Fragments](#testing-fragments)\r\n        - [Testing sqlite](#testing-sqlite)\r\n    - [Robotium](#robotium)\r\n    - [UI testing and UI Automator](#ui-testing-and-ui-automator)\r\n    - [MonkeyRunner](#monkeyrunner)\r\n- [References](#references)\r\n\r\n## Introduction\r\n\r\n### Why testing?\r\n\r\n* Testing forces you to think in a different way and implicitly makes your code cleaner in the process.\r\n* You feel more confident about your code if it has tests.\r\n* Shiny green status bars and cool reports detailing how much of your code is covered are both consequences of writing tests.\r\n* Regression testing is made a lot easier, as automated tests would pick up the bugs first.\r\n\r\n### Why unit test?\r\n\r\nA unit test generally exercises the functionality of the smallest possible unit of code (which could be a method, class, or component) in a repeatable way.\r\n\r\nTools that are used to do this testing:\r\n* [JUnit](http://junit.org/junit4/) – normal test assertions.\r\n* [Mockito](http://mockito.org/) – mocking out other classes that are not under test.\r\n* [PowerMock](https://github.com/jayway/powermock) – mocking out static classes such as Android Environment class etc.\r\n\r\n### Instrumented tests\r\n\r\nA UI Test or Instrumentation Test mocks typical user interactions with your app. Clicking on buttons, typing in text are some of the things UI Tests can complete.\r\n\r\n* [Espresso](https://google.github.io/android-testing-support-library/docs/espresso/) –  Used for testing within your app, selecting items, making sure something is visible.\r\n* [UIAutomator](https://developer.android.com/training/testing/ui-testing/uiautomator-testing.html) – Used for testing interaction between different apps.\r\n\r\nThere are other tools that are available for this kind of testing such as [Robotium](http://robotium.com/), [Appium](http://appium.io/), [Calabash](http://calaba.sh/), [Robolectric](http://robolectric.org/).\r\n\r\n## Local Tests\r\n\r\n### JUnit basics\r\n\r\n[Calculator.java](https://github.com/ravidsrk/android-testing-guide/blob/master/SampleApp/app/src/main/java/in/ravidsrk/sample/Calculator.java)\r\n\r\n```java\r\npublic class Calculator {\r\n\r\n    public int add(int op1, int op2) {\r\n        return op1 + op2;\r\n    }\r\n\r\n    public int diff(int op1, int op2) {\r\n        return op1 - op2;\r\n    }\r\n\r\n    public double div(int op1, int op2) {\r\n        // if (op2 == 0) return 0;\r\n        return op1 / op2;\r\n    }\r\n}\r\n```\r\n\r\n[CalculatorTest.java](https://github.com/ravidsrk/android-testing-guide/blob/master/SampleApp/app/src/test/java/in/ravidsrk/sample/CalculatorTest.java)\r\n```java\r\npublic class CalculatorTest {\r\n\r\n    private Calculator calculator;\r\n\r\n    @Before\r\n    public void setup() {\r\n        calculator = new Calculator();\r\n        System.out.println(\"Ready for testing!\");\r\n    }\r\n\r\n    @After\r\n    public void cleanup() {\r\n        System.out.println(\"Done with unit test!\");\r\n    }\r\n\r\n    @BeforeClass\r\n    public static void testClassSetup() {\r\n        System.out.println(\"Getting test class ready\");\r\n    }\r\n\r\n    @AfterClass\r\n    public static void testClassCleanup() {\r\n        System.out.println(\"Done with tests\");\r\n    }\r\n\r\n    @Test\r\n    public void testAdd() {\r\n        calculator = new Calculator();\r\n        int total = calculator.add(4, 5);\r\n        assertEquals(\"Calculator is not adding correctly\", 9, total);\r\n    }\r\n\r\n    @Test\r\n    public void testDiff() {\r\n        calculator = new Calculator();\r\n        int total = calculator.diff(9, 2);\r\n        assertEquals(\"Calculator is not subtracting correctly\", 7, total);\r\n    }\r\n\r\n    @Test\r\n    public void testDiv() {\r\n        calculator = new Calculator();\r\n        double total = calculator.div(9, 3);\r\n        assertEquals(\"Calculator is not dividing correctly\", 3.0, total, 0.0);\r\n    }\r\n}\r\n\r\n```\r\n\r\n### Beyond JUnit basics\r\n\r\n[CalculatorTest.java](https://github.com/ravidsrk/android-testing-guide/blob/master/SampleApp/app/src/test/java/in/ravidsrk/sample/CalculatorTest.java#L62)\r\n\r\n```java\r\n@Ignore\r\n@Test(expected = java.lang.ArithmeticException.class)\r\npublic void testDivWithZeroDivisor() {\r\n    calculator = new Calculator();\r\n    double total = calculator.div(9, 0);\r\n    assertEquals(\"Calculator is not handling division by zero correctly\", 0.0, total, 0.0);\r\n}\r\n```\r\n\r\n### Assertions\r\n\r\nJUnit provides overloaded assertion methods for all primitive types and Objects and arrays (of primitives or Objects). The parameter order is expected value followed by actual value. Optionally the first parameter can be a String message that is output on failure. There is a slightly different assertion, assertThat that has parameters of the optional failure message, the actual value, and a Matcher object. Note that expected and actual are reversed compared to the other assert methods.\r\n\r\n[AssertTests.java](https://github.com/ravidsrk/android-testing-guide/blob/master/SampleApp/app/src/test/java/in/ravidsrk/sample/AssertTests.java.java)\r\n\r\n```java\r\npublic class AssertTests {\r\n  @Test\r\n  public void testAssertArrayEquals() {\r\n    byte[] expected = \"trial\".getBytes();\r\n    byte[] actual = \"trial\".getBytes();\r\n    assertArrayEquals(\"failure - byte arrays not same\", expected, actual);\r\n  }\r\n\r\n  @Test\r\n  public void testAssertEquals() {\r\n    assertEquals(\"failure - strings are not equal\", \"text\", \"text\");\r\n  }\r\n\r\n  @Test\r\n  public void testAssertFalse() {\r\n    assertFalse(\"failure - should be false\", false);\r\n  }\r\n\r\n  @Test\r\n  public void testAssertNotNull() {\r\n    assertNotNull(\"should not be null\", new Object());\r\n  }\r\n\r\n  @Test\r\n  public void testAssertNotSame() {\r\n    assertNotSame(\"should not be same Object\", new Object(), new Object());\r\n  }\r\n\r\n  @Test\r\n  public void testAssertNull() {\r\n    assertNull(\"should be null\", null);\r\n  }\r\n\r\n  @Test\r\n  public void testAssertSame() {\r\n    Integer aNumber = Integer.valueOf(768);\r\n    assertSame(\"should be same\", aNumber, aNumber);\r\n  }\r\n\r\n  // JUnit Matchers assertThat\r\n  @Test\r\n  public void testAssertThatBothContainsString() {\r\n    assertThat(\"albumen\", both(containsString(\"a\")).and(containsString(\"b\")));\r\n  }\r\n\r\n  @Test\r\n  public void testAssertThatHasItems() {\r\n    assertThat(Arrays.asList(\"one\", \"two\", \"three\"), hasItems(\"one\", \"three\"));\r\n  }\r\n\r\n  @Test\r\n  public void testAssertThatEveryItemContainsString() {\r\n    assertThat(Arrays.asList(new String[] { \"fun\", \"ban\", \"net\" }), everyItem(containsString(\"n\")));\r\n  }\r\n\r\n  // Core Hamcrest Matchers with assertThat\r\n  @Test\r\n  public void testAssertThatHamcrestCoreMatchers() {\r\n    assertThat(\"good\", allOf(equalTo(\"good\"), startsWith(\"good\")));\r\n    assertThat(\"good\", not(allOf(equalTo(\"bad\"), equalTo(\"good\"))));\r\n    assertThat(\"good\", anyOf(equalTo(\"bad\"), equalTo(\"good\")));\r\n    assertThat(7, not(CombinableMatcher.<Integer> either(equalTo(3)).or(equalTo(4))));\r\n    assertThat(new Object(), not(sameInstance(new Object())));\r\n  }\r\n\r\n  @Test\r\n  public void testAssertTrue() {\r\n    assertTrue(\"failure - should be true\", true);\r\n  }\r\n}\r\n```\r\n\r\n### Hamcrest\r\n\r\n[HamcrestTest.java](https://github.com/ravidsrk/android-testing-guide/blob/master/SampleApp/app/src/test/java/in/ravidsrk/sample/HamcrestTest.java)\r\n\r\n```java\r\npublic class HamcrestTest {\r\n\r\n    @Test\r\n    public void testWithAsserts() {\r\n        List<String> list = generateStingList();\r\n        assertTrue(list.contains(\"android\"));\r\n        assertTrue(list.contains(\"context\"));\r\n        assertTrue(list.size() > 4);\r\n        assertTrue(list.size() < 13);\r\n    }\r\n\r\n    @Test\r\n    public void testWithBigAssert() {\r\n        List<String> list = generateStingList();\r\n        assertTrue(list.contains(\"android\") && list.contains(\"context\") && list.size() > 3 && list.size() < 12);\r\n    }\r\n\r\n    @Test\r\n    public void testWithHamcrest() {\r\n        List<String> list = generateStingList();\r\n        assertThat(list, (hasItems(\"android\", \"context\")));\r\n        assertThat(list, allOf(hasSize(greaterThan(3)), hasSize(lessThan(12))));\r\n    }\r\n\r\n    @Test\r\n    public void testFailureWithAsserts() {\r\n        List<String> list = generateStingList();\r\n        assertTrue(list.contains(\"android\"));\r\n        assertTrue(list.contains(\"service\"));\r\n        assertTrue(list.size() > 3);\r\n        assertTrue(list.size() < 12);\r\n    }\r\n\r\n    @Test\r\n    public void testFailureWithHamcrest() {\r\n        List<String> list = generateStingList();\r\n        assertThat(list, (hasItems(\"android\", \"service\")));\r\n        assertThat(list, allOf(hasSize(greaterThan(3)), hasSize(lessThan(12))));\r\n    }\r\n\r\n    @Test\r\n    public void testTypeSafety() {\r\n        // assertThat(\"123\", equalTo(123));\r\n        // assertThat(123, equalTo(\"123\"));\r\n    }\r\n\r\n    private List<String> generateStingList() {\r\n        String[] sentence = {\"android\", \"context\", \"service\", \"manifest\", \"layout\", \"resource\", \"broadcast\", \"receiver\", \"gradle\"};\r\n        return Arrays.asList(sentence);\r\n    }\r\n}\r\n```\r\n\r\n### Rules\r\n\r\n[CalculatorWithTestName.java](https://github.com/ravidsrk/android-testing-guide/blob/master/SampleApp/app/src/test/java/in/ravidsrk/sample/CalculatorWithTestName.java)\r\n\r\n```java\r\npublic class CalculatorWithTestName {\r\n\r\n    @Rule\r\n    public TestName name = new TestName();\r\n\r\n    @Test\r\n    public void testAdd() {\r\n        Calculator calculator = new Calculator();\r\n        int total = calculator.add(4, 5);\r\n        assertEquals(name.getMethodName() + \" adding incorrectly\", 9, total);\r\n    }\r\n\r\n    @Test\r\n    public void testDiff() {\r\n        Calculator calculator = new Calculator();\r\n        int total = calculator.diff(12, 7);\r\n        assertEquals(name.getMethodName() + \" subtracting incorrectly\", 5, total);\r\n    }\r\n}\r\n```\r\n\r\n## RESTMock\r\n\r\nRESTMock is a library working on top of Square's [okhttp/MockWebServer](https://github.com/square/okhttp/tree/master/mockwebserver). It allows you to specify [Hamcrest](https://github.com/hamcrest/JavaHamcrest) matchers to match HTTP requests and specify what response to return. It is as easy as:\r\n\r\n```java\r\nRESTMockServer.whenGET(pathContains(\"users/defunkt\"))\r\n            .thenReturnFile(200, \"users/defunkt.json\");\r\n```\r\n\r\n#### Step 1: Start the server\r\nIt's good to start server before the tested application starts, there are few methods:\r\n\r\n##### a) RESTMockTestRunner\r\nTo make it simple you can just use the predefined `RESTMockTestRunner` in your UI tests. It extends `AndroidJUnitRunner`:\r\n\r\n```groovy\r\ndefaultConfig {\r\n        ...\r\n        testInstrumentationRunner 'io.appflate.restmock.android.RESTMockTestRunner'\r\n    }\r\n```\r\n##### b) RESTMockServerStarter\r\nIf you have your custom test runner and you can't extend `RESTMockTestRunner`, you can always just call the `RESTMockServerStarter`. Actually `RESTMockTestRunner` is doing exactly the same thing:\r\n\r\n```java\r\npublic class MyAppTestRunner extends AndroidJUnitRunner {\r\n    ...\r\n    @Override\r\n    public void onCreate(Bundle arguments) {\r\n        super.onCreate(arguments);\r\n        RESTMockServerStarter.startSync(new AndroidAssetsFileParser(getContext()),new AndroidLogger());\r\n        ...\r\n    }\r\n    ...\r\n}\r\n\r\n```\r\n\r\n\r\n####Step 2: Specify Mocks\r\n\r\n##### a) Files\r\nBy default, the `RESTMockTestRunner` uses `AndroidAssetsFileParser` as a mocks file parser, which reads the files from the assets folder. To make them visible for the RESTMock you have to put them in the correct folder in your project, for example:\r\n\r\n    .../src/androidTest/assets/users/defunkt.json\r\nThis can be accessed like this:\r\n\r\n```java\r\nRESTMockServer.whenGET(pathContains(\"users/defunkt\"))\r\n            .thenReturnFile(200, \"users/defunkt.json\");\r\n```\r\n\r\n##### b) Strings\r\nIf the response You wish to return is simple, you can just specify a string:\r\n\r\n```java\r\nRESTMockServer.whenGET(pathContains(\"users/defunkt\"))\r\n            .thenReturnString(200, \"{}\");\r\n```\r\n##### c) MockResponse\r\nIf you wish to have a greater control over the response, you can pass the `MockResponse`\r\n```java\r\nRESTMockServer.whenGET(pathContains(\"users/defunkt\")).thenReturn(new MockResponse().setBody(\"\").setResponseCode(401).addHeader(\"Header\",\"Value\"));\r\n```\r\n\r\n#### Step 5: Request Matchers\r\nYou can either use some of the predefined matchers from `RequestMatchers` util class, or create your own. remember to extend from `RequestMatcher`\r\n\r\n#### Step 6: Specify API Endpoint\r\nThe most important step, in order for your app to communicate with the testServer, you have to specify it as an endpoint for all your API calls. For that, you can use the ` RESTMockServer.getUrl()`. If you use Retrofit, it is as easy as:\r\n\r\n```java\r\nRestAdapter adapter = new RestAdapter.Builder()\r\n                .baseUrl(RESTMockServer.getUrl())\r\n                ...\r\n                .build();\r\n```\r\n#### Request verification\r\nIt is possible to verify which requests were called and how many times thanks to `RequestsVerifier`. All you have to do is call one of these:\r\n\r\n```java\r\n//cheks if the GET request was invoked exactly 2 times\r\nRequestsVerifier.verifyGET(pathEndsWith(\"users\")).exactly(2);\r\n\r\n//cheks if the GET request was invoked at least 3 times\r\nRequestsVerifier.verifyGET(pathEndsWith(\"users\")).atLeast(3);\r\n\r\n//cheks if the GET request was invoked exactly 1 time\r\nRequestsVerifier.verifyGET(pathEndsWith(\"users\")).invoked();\r\n\r\n//cheks if the GET request was never invoked\r\nRequestsVerifier.verifyGET(pathEndsWith(\"users\")).never();\r\n```\r\n\r\n#### Logging\r\nRESTMock supports logging events. You just have to provide the RESTMock with the implementation of `RESTMockLogger`. For Android there is an `AndroidLogger` implemented already. All you have to do is use the `RESTMockTestRunner` or call\r\n\r\n```java\r\nRESTMockServerStarter.startSync(new AndroidAssetsFileParser(getContext()),new AndroidLogger());\r\n```\r\n\r\nor\r\n\r\n```java\r\nRESTMockServer.enableLogging(RESTMockLogger)\r\nRESTMockServer.disableLogging()\r\n```\r\n\r\n## Android\r\n\r\n### Android test rules\r\n\r\n#### Rule to test Android Activity\r\n\r\n[MainActivityTestRule.java](https://github.com/ravidsrk/android-testing-guide/blob/master/SampleApp/app/src/androidTest/java/in/ravidsrk/sample/MainActivityTestRule.java)\r\n\r\n```java\r\npublic class MainActivityTestRule<A extends Activity> extends ActivityTestRule<A> {\r\n\r\n    public MainActivityTestRule(Class<A> activityClass) {\r\n        super(activityClass);\r\n    }\r\n    @Override\r\n    protected Intent getActivityIntent() {\r\n        Log.e(\"MainActivityTestRule\", \"Prepare the activity's intent\");\r\n        return super.getActivityIntent();\r\n    }\r\n\r\n    @Override\r\n    protected void beforeActivityLaunched() {\r\n        Log.e(\"MainActivityTestRule\", \"Execute before the activity is launched\");\r\n        super.beforeActivityLaunched();\r\n    }\r\n\r\n    @Override\r\n    protected void afterActivityLaunched() {\r\n        Log.e(\"MainActivityTestRule\", \"Execute after the activity has been launched\");\r\n        super.afterActivityLaunched();\r\n    }\r\n\r\n    @Override\r\n    protected void afterActivityFinished() {\r\n        Log.e(\"MainActivityTestRule\", \"Cleanup after it has finished\");\r\n        super.afterActivityFinished();\r\n    }\r\n\r\n    @Override\r\n    public A launchActivity(Intent startIntent) {\r\n        Log.e(\"MainActivityTestRule\", \"Launching the activity\");\r\n        return super.launchActivity(startIntent);\r\n    }\r\n}\r\n```\r\n\r\n#### Rule to test Android Service\r\n\r\n[SampleServiceTestRule.java](https://github.com/ravidsrk/android-testing-guide/blob/master/SampleApp/app/src/androidTest/java/in/ravidsrk/sample/SampleServiceTest.java)\r\n\r\n```java\r\npublic class SampleServiceTestRule extends ServiceTestRule {\r\n\r\n    @Override\r\n    public void startService(Intent intent) throws TimeoutException {\r\n        Log.e(\"SampleServiceTestRule\", \"start the service\");\r\n        super.startService(intent);\r\n    }\r\n\r\n    @Override\r\n    public IBinder bindService(Intent intent) throws TimeoutException {\r\n        Log.e(\"SampleServiceTestRule\", \"binding the service\");\r\n        return super.bindService(intent);\r\n    }\r\n\r\n    @Override\r\n    protected void beforeService() {\r\n        Log.e(\"SampleServiceTestRule\", \"work before the service starts\");\r\n        super.beforeService();\r\n    }\r\n\r\n    @Override\r\n    protected void afterService() {\r\n        Log.e(\"SampleServiceTestRule\", \"work after the service has started\");\r\n        super.afterService();\r\n    }\r\n}\r\n```\r\n\r\n### Android instrumented tests\r\n#### Testing Android Activity\r\n\r\n[MainActivityTest.java](https://github.com/ravidsrk/android-testing-guide/blob/master/SampleApp/app/src/androidTest/java/in/ravidsrk/sample/MainActivityTest.java)\r\n\r\n```java\r\n@RunWith(AndroidJUnit4.class)\r\npublic class MainActivityTest {\r\n\r\n    @Rule\r\n    public MainActivityTestRule<MainActivity> mainActivityActivityTestRule = new MainActivityTestRule<MainActivity>(MainActivity.class);\r\n\r\n    @Test\r\n    public void testUI() {\r\n        Activity activity = mainActivityActivityTestRule.getActivity();\r\n        assertNotNull(activity.findViewById(R.id.text_hello));\r\n        TextView helloView = (TextView) activity.findViewById(R.id.text_hello);\r\n        assertTrue(helloView.isShown());\r\n        assertEquals(\"Hello World!\", helloView.getText());\r\n        assertEquals(InstrumentationRegistry.getTargetContext().getString(R.string.hello_world), helloView.getText());\r\n        assertNull(activity.findViewById(android.R.id.button1));\r\n    }\r\n}\r\n```\r\n\r\n#### Testing Android Service\r\n\r\n[SampleServiceTest](https://github.com/ravidsrk/android-testing-guide/blob/master/SampleApp/app/src/androidTest/java/in/ravidsrk/sample/SampleServiceTest.java)\r\n\r\n```java\r\n@RunWith(AndroidJUnit4.class)\r\npublic class SampleServiceTest {\r\n\r\n    @Rule\r\n    public SampleServiceTestRule myServiceRule = new SampleServiceTestRule();\r\n\r\n    @Test\r\n    public void testService() throws TimeoutException {\r\n        myServiceRule.startService(new Intent(InstrumentationRegistry.getTargetContext(), SampleService.class));\r\n    }\r\n\r\n    @Test\r\n    public void testBoundService() throws TimeoutException {\r\n        IBinder binder = myServiceRule.bindService(\r\n                new Intent(InstrumentationRegistry.getTargetContext(), SampleService.class));\r\n        SampleService service = ((SampleService.LocalBinder) binder).getService();\r\n        // Do work with the service\r\n        assertNotNull(\"Bound service is null\", service);\r\n    }\r\n}\r\n```\r\n\r\n### Test filtering\r\n\r\n[MainActivityTest.java](https://github.com/ravidsrk/android-testing-guide/blob/master/SampleApp/app/src/androidTest/java/in/ravidsrk/sample/MainActivityTest.java#L61)\r\n\r\n```java\r\n@Test\r\n@RequiresDevice\r\npublic void testRequiresDevice() {\r\n    Log.d(\"Test Filters\", \"This test requires a device\");\r\n    Activity activity = activityTestRule.getActivity();\r\n    assertNotNull(\"MainActivity is not available\", activity);\r\n}\r\n\r\n@Test\r\n@SdkSuppress(minSdkVersion = 30)\r\npublic void testMinSdkVersion() {\r\n    Log.d(\"Test Filters\", \"Checking for min sdk >= 30\");\r\n    Activity activity = activityTestRule.getActivity();\r\n    assertNotNull(\"MainActivity is not available\", activity);\r\n}\r\n\r\n@Test\r\n@SdkSuppress(minSdkVersion = Build.VERSION_CODES.LOLLIPOP)\r\npublic void testMinBuild() {\r\n    Log.d(\"Test Filters\", \"Checking for min build > Lollipop\");\r\n    Activity activity = activityTestRule.getActivity();\r\n    assertNotNull(\"MainActivity is not available\", activity);\r\n}\r\n\r\n@Test\r\n@SmallTest\r\npublic void testSmallTest() {\r\n    Log.d(\"Test Filters\", \"this is a small test\");\r\n    Activity activity = activityTestRule.getActivity();\r\n    assertNotNull(\"MainActivity is not available\", activity);\r\n}\r\n\r\n@Test\r\n@LargeTest\r\npublic void testLargeTest() {\r\n    Log.d(\"Test Filters\", \"This is a large test\");\r\n    Activity activity = activityTestRule.getActivity();\r\n    assertNotNull(\"MainActivity is not available\", activity);\r\n}\r\n```\r\n\r\n### Espresso\r\n\r\n[MainActivityTest.java](https://github.com/ravidsrk/android-testing-guide/blob/master/SampleApp/app/src/androidTest/java/in/ravidsrk/sample/MainActivityTest.java#L134)\r\n\r\n```java\r\n@Test\r\npublic void testEspresso() {\r\n    ViewInteraction interaction =\r\n            onView(allOf(withId(R.id.editText),\r\n                    withText(\"this is a test\"),\r\n                    hasFocus()));\r\n    interaction.perform(replaceText(\"how about some new text\"));\r\n    ViewInteraction interaction2 =\r\n            onView(allOf(withId(R.id.editText),\r\n                    withText(\"how about some new text\")));\r\n    interaction2.check(matches(hasFocus()));\r\n}\r\n\r\n@Test\r\npublic void testEspressoSimplified() {\r\n    onView(allOf(withId(R.id.editText),\r\n            withText(\"this is a test\"),\r\n            hasFocus())).perform(replaceText(\"how about some new text\"));\r\n    onView(allOf(withId(R.id.editText),\r\n            withText(\"how about some new text\"))).check(matches(hasFocus()));\r\n}\r\n\r\n```\r\n### Robolectric\r\n\r\n[MainActivityRoboelectricTest.java](https://github.com/ravidsrk/android-testing-guide/blob/master/SampleApp/app/src/test/java/in/ravidsrk/sample/MainActivityRoboelectricTest.java)\r\n\r\n```java\r\n@RunWith(RobolectricGradleTestRunner.class)\r\n@Config(constants = BuildConfig.class)\r\npublic class MainActivityRoboelectricTest {\r\n\r\n    private MainActivity activity;\r\n\r\n    @Before\r\n    public void setup() {\r\n        activity = Robolectric.setupActivity(MainActivity.class);\r\n    }\r\n\r\n    @Test\r\n    public void clickButton() {\r\n        Button button = (Button) activity.findViewById(R.id.button);\r\n        assertNotNull(\"test button could not be found\", button);\r\n        assertTrue(\"button does not contain text 'Click Me!'\", \"Click Me\".equals(button.getText()));\r\n    }\r\n\r\n}\r\n```\r\n\r\n### Robotium\r\n\r\n[MainActivityRobotiumTest.java](https://github.com/ravidsrk/android-testing-guide/blob/master/SampleApp/app/src/androidTest/java/in/ravidsrk/sample/MainActivityRobotiumTest.java)\r\n\r\n```java\r\npublic class MainActivityRobotiumTest {\r\n    private Solo solo;\r\n\r\n    @Rule\r\n    public MainActivityRobotiumTestRule<MainActivity> mActivityRule = new MainActivityRobotiumTestRule<>(MainActivity.class);\r\n\r\n    public void setUp() {\r\n        solo = new Solo(mActivityRule.getInstrumentation(), mActivityRule.getActivity());\r\n    }\r\n\r\n    public void tearDown() {\r\n        solo.finishOpenedActivities();\r\n    }\r\n\r\n    @Test\r\n    public void testPushClickMe() {\r\n        solo.waitForActivity(MainActivity.class);\r\n        solo.assertCurrentActivity(\"MainActivity is not displayed\", MainActivity.class);\r\n        assertTrue(\"This is a test in EditText is not displayed\",\r\n                solo.searchText(\"this is a test\"));\r\n        solo.clickOnButton(\"Click Me\");\r\n        assertTrue(\"You clicked me text is not displayed in the EditText\",\r\n                solo.searchText(\"you clicked me!\"));\r\n    }\r\n}\r\n```\r\n\r\n[MainActivityRobotiumTestRule.java](https://github.com/ravidsrk/android-testing-guide/blob/master/SampleApp/app/src/androidTest/java/in/ravidsrk/sample/MainActivityRobotiumTestRule.java)\r\n\r\n```java\r\n@Beta\r\npublic class MainActivityRobotiumTestRule<T extends Activity> extends UiThreadTestRule {\r\n\r\n    private static final String TAG = \"InstrumentationRule\";\r\n    private final Class<T> mActivityClass;\r\n\r\n    public Instrumentation getInstrumentation() {\r\n        return mInstrumentation;\r\n    }\r\n\r\n    private Instrumentation mInstrumentation;\r\n    private boolean mInitialTouchMode = false;\r\n    private boolean mLaunchActivity = false;\r\n    private T mActivity;\r\n\r\n    /**\r\n     * Similar to {@link #MainActivityRobotiumTestRule(Class, boolean, boolean)} but with \"touch mode\" disabled.\r\n     *\r\n     * @param activityClass    The activity under test. This must be a class in the instrumentation\r\n     *                         targetPackage specified in the AndroidManifest.xml\r\n     * @see MainActivityRobotiumTestRule#MainActivityRobotiumTestRule(Class, boolean, boolean)\r\n     */\r\n    public MainActivityRobotiumTestRule(Class<T> activityClass) {\r\n        this(activityClass, false);\r\n    }\r\n\r\n    /**\r\n     * Similar to {@link #MainActivityRobotiumTestRule(Class, boolean, boolean)} but defaults to launch the\r\n     * activity under test once per\r\n     * <a href=\"http://junit.org/javadoc/latest/org/junit/Test.html\"><code>Test</code></a> method.\r\n     * It is launched before the first\r\n     * <a href=\"http://junit.sourceforge.net/javadoc/org/junit/Before.html\"><code>Before</code></a>\r\n     * method, and terminated after the last\r\n     * <a href=\"http://junit.sourceforge.net/javadoc/org/junit/After.html\"><code>After</code></a>\r\n     * method.\r\n     *\r\n     * @param activityClass    The activity under test. This must be a class in the instrumentation\r\n     *                         targetPackage specified in the AndroidManifest.xml\r\n     * @param initialTouchMode true if the Activity should be placed into \"touch mode\" when started\r\n     * @see MainActivityRobotiumTestRule#MainActivityRobotiumTestRule(Class, boolean, boolean)\r\n     */\r\n    public MainActivityRobotiumTestRule(Class<T> activityClass, boolean initialTouchMode) {\r\n        this(activityClass, initialTouchMode, true);\r\n    }\r\n\r\n    /**\r\n     * Creates an {@link MainActivityRobotiumTestRule} for the Activity under test.\r\n     *\r\n     * @param activityClass    The activity under test. This must be a class in the instrumentation\r\n     *                         targetPackage specified in the AndroidManifest.xml\r\n     * @param initialTouchMode true if the Activity should be placed into \"touch mode\" when started\r\n     * @param launchActivity   true if the Activity should be launched once per\r\n     *                         <a href=\"http://junit.org/javadoc/latest/org/junit/Test.html\">\r\n     *                         <code>Test</code></a> method. It will be launched before the first\r\n     *                         <a href=\"http://junit.sourceforge.net/javadoc/org/junit/Before.html\">\r\n     *                         <code>Before</code></a> method, and terminated after the last\r\n     *                         <a href=\"http://junit.sourceforge.net/javadoc/org/junit/After.html\">\r\n     *                         <code>After</code></a> method.\r\n     */\r\n    public MainActivityRobotiumTestRule(Class<T> activityClass, boolean initialTouchMode,\r\n                              boolean launchActivity) {\r\n        mActivityClass = activityClass;\r\n        mInitialTouchMode = initialTouchMode;\r\n        mLaunchActivity = launchActivity;\r\n        mInstrumentation = InstrumentationRegistry.getInstrumentation();\r\n    }\r\n\r\n    /**\r\n     * Override this method to set up Intent as if supplied to\r\n     * {@link android.content.Context#startActivity}.\r\n     * <p>\r\n     * The default Intent (if this method returns null or is not overwritten) is:\r\n     * action = {@link Intent#ACTION_MAIN}\r\n     * flags = {@link Intent#FLAG_ACTIVITY_NEW_TASK}\r\n     * All other intent fields are null or empty.\r\n     *\r\n     * @return The Intent as if supplied to {@link android.content.Context#startActivity}.\r\n     */\r\n    protected Intent getActivityIntent() {\r\n        return new Intent(Intent.ACTION_MAIN);\r\n    }\r\n\r\n    /**\r\n     * Override this method to execute any code that should run before your {@link Activity} is\r\n     * created and launched.\r\n     * This method is called before each test method, including any method annotated with\r\n     * <a href=\"http://junit.sourceforge.net/javadoc/org/junit/Before.html\"><code>Before</code></a>.\r\n     */\r\n    protected void beforeActivityLaunched() {\r\n        // empty by default\r\n    }\r\n\r\n    /**\r\n     * Override this method to execute any code that should run after your {@link Activity} is\r\n     * launched, but before any test code is run including any method annotated with\r\n     * <a href=\"http://junit.sourceforge.net/javadoc/org/junit/Before.html\"><code>Before</code></a>.\r\n     * <p>\r\n     * Prefer\r\n     * <a href=\"http://junit.sourceforge.net/javadoc/org/junit/Before.html\"><code>Before</code></a>\r\n     * over this method. This method should usually not be overwritten directly in tests and only be\r\n     * used by subclasses of MainActivityRobotiumTestRule to get notified when the activity is created and\r\n     * visible but test runs.\r\n     */\r\n    protected void afterActivityLaunched() {\r\n        // empty by default\r\n    }\r\n\r\n    /**\r\n     * Override this method to execute any code that should run after your {@link Activity} is\r\n     * finished.\r\n     * This method is called after each test method, including any method annotated with\r\n     * <a href=\"http://junit.sourceforge.net/javadoc/org/junit/After.html\"><code>After</code></a>.\r\n     */\r\n    protected void afterActivityFinished() {\r\n        // empty by default\r\n    }\r\n\r\n    /**\r\n     * @return The activity under test.\r\n     */\r\n    public T getActivity() {\r\n        if (mActivity == null) {\r\n            Log.w(TAG, \"Activity wasn't created yet\");\r\n        }\r\n        return mActivity;\r\n    }\r\n\r\n    @Override\r\n    public Statement apply(final Statement base, Description description) {\r\n        return new ActivityStatement(super.apply(base, description));\r\n    }\r\n\r\n    /**\r\n     * Launches the Activity under test.\r\n     * <p>\r\n     * Don't call this method directly, unless you explicitly requested not to launch the Activity\r\n     * manually using the launchActivity flag in\r\n     * {@link MainActivityRobotiumTestRule#MainActivityRobotiumTestRule(Class, boolean, boolean)}.\r\n     * <p>\r\n     * Usage:\r\n     * <pre>\r\n     *    &#064;Test\r\n     *    public void customIntentToStartActivity() {\r\n     *        Intent intent = new Intent(Intent.ACTION_PICK);\r\n     *        mActivity = mActivityRule.launchActivity(intent);\r\n     *    }\r\n     * </pre>\r\n     * @param startIntent The Intent that will be used to start the Activity under test. If\r\n     *                    {@code startIntent} is null, the Intent returned by\r\n     *                    {@link MainActivityRobotiumTestRule#getActivityIntent()} is used.\r\n     * @return the Activity launched by this rule.\r\n     * @see MainActivityRobotiumTestRule#getActivityIntent()\r\n     */\r\n    public T launchActivity(@Nullable Intent startIntent) {\r\n        // set initial touch mode\r\n        mInstrumentation.setInTouchMode(mInitialTouchMode);\r\n\r\n        final String targetPackage = mInstrumentation.getTargetContext().getPackageName();\r\n        // inject custom intent, if provided\r\n        if (null == startIntent) {\r\n            startIntent = getActivityIntent();\r\n            if (null == startIntent) {\r\n                Log.w(TAG, \"getActivityIntent() returned null using default: \" +\r\n                        \"Intent(Intent.ACTION_MAIN)\");\r\n                startIntent = new Intent(Intent.ACTION_MAIN);\r\n            }\r\n        }\r\n        startIntent.setClassName(targetPackage, mActivityClass.getName());\r\n        startIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\r\n        Log.d(TAG, String.format(\"Launching activity %s\",\r\n                mActivityClass.getName()));\r\n\r\n        beforeActivityLaunched();\r\n        // The following cast is correct because the activity we're creating is of the same type as\r\n        // the one passed in\r\n        mActivity = mActivityClass.cast(mInstrumentation.startActivitySync(startIntent));\r\n\r\n        mInstrumentation.waitForIdleSync();\r\n\r\n        afterActivityLaunched();\r\n        return mActivity;\r\n    }\r\n\r\n    // Visible for testing\r\n    void setInstrumentation(Instrumentation instrumentation) {\r\n        mInstrumentation = checkNotNull(instrumentation, \"instrumentation cannot be null!\");\r\n    }\r\n\r\n    void finishActivity() {\r\n        if (mActivity != null) {\r\n            mActivity.finish();\r\n            mActivity = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * <a href=\"http://junit.org/apidocs/org/junit/runners/model/Statement.html\">\r\n     * <code>Statement</code></a> that finishes the activity after the test was executed\r\n     */\r\n    private class ActivityStatement extends Statement {\r\n\r\n        private final Statement mBase;\r\n\r\n        public ActivityStatement(Statement base) {\r\n            mBase = base;\r\n        }\r\n\r\n        @Override\r\n        public void evaluate() throws Throwable {\r\n            try {\r\n                if (mLaunchActivity) {\r\n                    mActivity = launchActivity(getActivityIntent());\r\n                }\r\n                mBase.evaluate();\r\n            } finally {\r\n                finishActivity();\r\n                afterActivityFinished();\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n```\r\n### UI testing and UI Automator\r\n\r\n[MainActivityTest](https://github.com/ravidsrk/android-testing-guide/blob/master/SampleApp/app/src/androidTest/java/in/ravidsrk/sample/MainActivityTest.java#L101)\r\n\r\n```java\r\n@Test\r\npublic void testPressBackButton() {\r\n    UiDevice.getInstance(InstrumentationRegistry.getInstrumentation()).pressBack();\r\n}\r\n\r\n@Test\r\n@Ignore\r\npublic void testUiDevice() throws RemoteException {\r\n    UiDevice device = UiDevice.getInstance(\r\n            InstrumentationRegistry.getInstrumentation());\r\n    if (device.isScreenOn()) {\r\n        device.setOrientationLeft();\r\n        device.openNotification();\r\n    }\r\n}\r\n\r\n@Test\r\npublic void testUiAutomatorAPI() throws UiObjectNotFoundException, InterruptedException {\r\n    UiDevice device = UiDevice.getInstance(InstrumentationRegistry.getInstrumentation());\r\n\r\n    UiSelector editTextSelector = new UiSelector().className(\"android.widget.EditText\").text(\"this is a test\").focusable(true);\r\n    UiObject editTextWidget = device.findObject(editTextSelector);\r\n    editTextWidget.setText(\"this is new text\");\r\n\r\n    Thread.sleep(2000);\r\n\r\n    UiSelector buttonSelector = new UiSelector().className(\"android.widget.Button\").text(\"Click Me\").clickable(true);\r\n    UiObject buttonWidget = device.findObject(buttonSelector);\r\n    buttonWidget.click();\r\n\r\n    Thread.sleep(2000);\r\n\r\n}\r\n```\r\n\r\n### MonkeyRunner\r\n\r\n[sampletest.py](https://github.com/ravidsrk/android-testing-guide/blob/master/SampleApp/sampletest.py)\r\n\r\n```python\r\n# Imports the monkeyrunner modules\r\nfrom com.android.monkeyrunner import MonkeyRunner, MonkeyDevice, MonkeyImage\r\n\r\n# Alert the user a MonkeyRunner script is about to execute\r\nMonkeyRunner.alert(\"Monkeyrunner about to execute\",\"Monkeyrunner\",\"OK\")\r\n\r\n# Connects to the current emulator\r\nemulator= MonkeyRunner.waitForConnection()\r\n\r\n# Install the Android app package and test package\r\nemulator.installPackage('./app/build/outputs/apk/app-debug-unaligned.apk')\r\nemulator.installPackage('./app/build/outputs/apk/app-debug-androidTest-unaligned.apk')\r\n\r\n# sets a variable with the package's internal name\r\npackage = 'in.ravidsrk.sample'\r\n\r\n# sets a variable with the name of an Activity in the package\r\nactivity = 'in.ravidsrk.sample.MainActivity'\r\n\r\n# sets the name of the component to start\r\nrunComponent = package + '/' + activity\r\n\r\n# Runs the component\r\nemulator.startActivity(runComponent)\r\n\r\n# wait for the screen to fully come up\r\nMonkeyRunner.sleep(2.0)\r\n\r\n# Takes a screenshot\r\nsnapshot = emulator.takeSnapshot()\r\n\r\n# Writes the screenshot to a file\r\nsnapshot.writeToFile('mainactivity.png','png')\r\n\r\n# Alert the user a testing is about to be run by MonkeyRunner\r\nMonkeyRunner.alert(\"Instrumented test about to execute\",\"Monkeyrunner\",\"OK\")\r\n\r\n#kick off the instrumented test\r\nemulator.shell('am instrument -w in.ravidsrk.sample.test/android.support.test.runner.AndroidJUnitRunner')\r\n\r\n# return to the emulator home screen\r\nemulator.press('KEYCODE_HOME','DOWN_AND_UP')\r\n\r\n```\r\n\r\n## References\r\n* <https://github.com/junit-team/junit4/wiki/assertions>\r\n* <https://github.com/googlesamples/android-testing>\r\n* <https://riggaroo.co.za/introduction-automated-android-testing/>\r\n* <http://robolectric.org>\r\n* <https://github.com/robolectric/robolectric>\r\n* <https://www.bignerdranch.com/blog/triumph-android-studio-1-2-sneaks-in-full-testing-support>\r\n* <https://github.com/mutexkid/android-studio-robolectric-example>\r\n* <http://blog.nikhaldimann.com/2013/10/10/robolectric-2-2-some-pages-from-the-missing-manual>\r\n* <https://corner.squareup.com/2013/04/the-resurrection-of-testing-for-android.html>\r\n* <http://simpleprogrammer.com/2010/07/27/the-best-way-to-unit-test-in-android/>\r\n* <https://youtu.be/f7ihSQ44WO0?t=15m11s>\r\n* <https://code.google.com/p/android-test-kit>\r\n* <https://developer.android.com/training/testing/ui-testing/espresso-testing.html>\r\n* <https://github.com/vgrec/EspressoExamples>\r\n* <https://github.com/designatednerd/Wino>\r\n* <http://chiuki.github.io/advanced-android-espresso/#/>\r\n* <http://www.vogella.com/tutorials/AndroidTestingEspresso/article.html>\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}